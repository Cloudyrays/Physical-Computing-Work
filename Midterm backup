/*
 Midterm Assignment
 Sophia Niergarth
 Physical Computing
 OCAD University
 Created on 11 February 2015
 
 Based on:
 Lesson 3 RGB LED, Adafruit Arduino, https://learn.adafruit.com/adafruit-arduino-lesson-3-rgb-leds/arduino-sketch
 
 toneMelody, Tom Igoe,  http://arduino.cc/en/Tutorial/Tone 
 
 */

int buttonPin1 = 10;                   //set pins for switches
int buttonPin2 = 11;
int buttonPin3 = 12;

int push1;                             //variables to represent switch input
int push2;
int push3;

boolean lastState1;                    //variables for single push input
boolean lastState2;
boolean lastState3;

int passCode[]= {
  1, 3, 2, 2, 3, 2};                   //current passcode array
int currentCodeInput[6];               //array for storing passcode input
int codeTracker = 0;                   //keeps track of recorded button presses
boolean stillOk = true;                //keeps track of whether or not you've been entering the right code
boolean locked = true;                 //keeps track of whether the system is unlocked

int redPin = 3;                        //set pins for RGB LED legs
int greenPin = 5;
int bluePin = 6;

int potPin = 0;                        //set potentiometer pin
int potSection;                        //represents the quandrant that the potentiometer pointer is in
int lastPotSection;                    //represents the previous quandrant from the last cycle

 #include "pitches.h"

void setup () {

  Serial.begin(9600);

  pinMode(buttonPin1, INPUT);          //setting pin modes
  pinMode(buttonPin2, INPUT);
  pinMode(buttonPin3, INPUT);
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);
  pinMode(potPin, INPUT);

  setColour(0, 0, 255);                //have the RGB LED blink in blue 3 times on start up
  delay(300);
  setColour(0, 0, 0);
  delay(300);
  setColour(0, 0, 255);
  delay(300);
  setColour(0, 0, 0);
  delay(300);
  setColour(0, 0, 255);
  delay(300);
  setColour(0, 0, 0);

}

void loop () {

  push1 = digitalRead(buttonPin1);         //making push1-push3 dependant on the button input
  push2 = digitalRead(buttonPin2);
  push3 = digitalRead(buttonPin3);

  int potInput = analogRead(potPin);       //making potInput dependant on potentionmeter input


  if (potInput < 200) {                    //assigning potSections to 4 ranges of the potentiometer input
    potSection = 0; 
  }
  else if (potInput >= 200 && potInput <500) {
    potSection = 1; 
  }
  else if (potInput >= 500 && potInput <800) {
    potSection = 2;
  } 
  else {
    potSection = 3;
  }


 //giving the system tasks depending on current potSection:
  if (potSection == 0) {
    inputMode();
  }

  else if (potSection == 1) {
    clue();
  } 

  else if (potSection == 2) {
    codeSetMode();
  } 

  else if (potSection == 3) {
    lock();
  }

  serialTesting();

  int lastPotSection = potSection;      //making lastPotSection remember what potSection was in the last cycle
  delay(10);

} 

void clue () 
{
  codeTracker = 0;
  if (locked == true) {
  
                                     //correspond buttons to colours, blink LED 
  for(int i = 0; i < 7; i ++) {
   if(passCode[i] == 1) {
     setColour(80, 0, 80);
    }
    else if(passCode[i] == 2) {
     setColour(0, 255, 255);
    }
    else if(passCode[i] == 3) {
     setColour(255, 255, 0);
    }
  delay(200);
  setColour(0, 0, 0);
  delay(200);
  }
  setColour(0, 0, 0);               //take a big pause between clue patterns
  delay(1000); 
  }
}

void inputMode () {
if (locked == true) { 
     if (potSection != lastPotSection) {            //just switched to this mode? Then when you start entering the code, restart checking process
      codeTracker = 0; 
      stillOk = true;
     }
          
     if (codeTracker < 6) {                               //if the code hasn't been completely entered, continue to register button input 
         if (push1 == HIGH && lastState1 == LOW) {        //1 button press = 1 input (so holding down the button doesn't do anything)
           currentCodeInput[codeTracker] = 1;             //remember the input
           tone(9, NOTE_C3, 200);                         //sound feedback
           codeTracker ++;                                //remember that another input has been added
         }else if (push2 == HIGH && lastState2 == LOW) {
           currentCodeInput[codeTracker] = 2;
           tone(9, NOTE_D3, 200);
           codeTracker ++;
         }else if (push3 == HIGH && lastState3 == LOW) {
           currentCodeInput[codeTracker] = 3;
           tone(9, NOTE_E3, 200);
           codeTracker ++;
         }
         
           lastState1 = push1;                             //remember last state of button
           lastState2 = push2;
           lastState3 = push3;
     }

     
     if (codeTracker == 6) {                               //after there have been 6 button pushes...
       for (int i = 0; i < 6; i++) {
        if (currentCodeInput[i] != passCode[i]) {      
         stillOk = false;                                  //if any of the codes don't match up, the system remains locked
        }
       }
       
       if (stillOk == true) {                             //if the input and passcode match, unlock the system, flash green
          locked = false;
          setColour(0, 255, 0);                           //blinking green shows you've input the right code
          delay (300);
          setColour(0, 0, 0);
          delay(300);
          setColour(0, 255, 0);
          delay(300);
          setColour(0, 0, 0);
          openSong();                                    //play a small song
          codeTracker = 0;                               //reset checking system
          
       } else if (stillOk == false) {
        setColour(255, 0, 0);                            //blinking red shows you've input the wrong code
        delay (300);
        setColour(0, 0, 0);
        delay(300);
        setColour(255, 0, 0);
        delay(300);
        setColour(0, 0, 0);
        codeTracker = 0;                                //reset checking system
        stillOk = true;       
       }
     }

    }
   } 

void lock () {                                         //this occurs when the user turns the potentiometer into lock mode
  codeTracker = 0;
  if (locked == false) {                               //the following only happens when the lock is locked and not repeatedly after
    lockSong();
  }
  locked = true;
}

/*************************************************     //this is to make coding the songs easier
 * Public Constants
 *************************************************/

#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978

void serialTesting () {                   //this function is only for testing
 
  Serial.println("currentCodeInput:");
  for(int i = 0; i < 6; i++) {
    Serial.print(currentCodeInput[i]);
  }
  
  Serial.println("passCode:");
  for(int i = 0; i < 6; i++) {
    Serial.print(passCode[i]); 
  }
  
  delay(100);
  
  //Serial.println(stillOk);
  //Serial.println(potSection);   //used this to verify things
  //0-100(top left), 200-400(bottom left), 600-800 (bottom right), 900-1023(top right) 
  
}

void codeSetMode() {      
if (locked == false) {                                //you must have unlocked the code to set a new code
     
     if (codeTracker < 6) {                           //if the code hasn't been completely entered 
     
      if (push1 == HIGH && lastState1 == LOW) {
           currentCodeInput[codeTracker] = 1;
           codeTracker ++;
      }else if (push2 == HIGH && lastState2 == LOW) {
           currentCodeInput[codeTracker] = 2;
           codeTracker ++;
      }else if (push3 == HIGH && lastState3 == LOW) {
           currentCodeInput[codeTracker] = 3;
           codeTracker ++;
      }
         
      lastState1 = push1;
      lastState2 = push2;
      lastState3 = push3;
     

     if (codeTracker == 6) {                  //if you've made 6 pushes
       for (int i = 0; i < 6; i++) {          //set the new passcode to equal the one just entered
        passCode[i] = currentCodeInput[i]; 
       }
       
      setColour(255, 100, 0);                 //the colours show that you've just changed the code
      delay (300);
      setColour(0, 0, 0);
      delay (300);
      setColour(255, 100, 0);
      delay(300);
      setColour(0, 0, 0);
      
      locked = true;                          //entering a new code also locks the system
    }
   }
  }
}

void setColour(int red, int green, int blue) //translating RGB code into info for each of the LED pins. This function is from Adafruit
{
    red = 255 - red;                         //LED is common anode, so this is necessairy
    green = 255 - green;
    blue = 255 - blue;
  analogWrite(redPin, red);
  analogWrite(greenPin, green);
  analogWrite(bluePin, blue);  
}

void openSong () {                 //this song plays when the system is unlocked
  
    int melody[] = {
      NOTE_C2, NOTE_E3, NOTE_G3, NOTE_C4, NOTE_G3, NOTE_E3, NOTE_C2
    };
  
    int noteDurations[] = {
      4, 4, 4, 2,4,4,2 
    };
    
    int notes = 7;
  
    for (int thisNote = 0; thisNote < notes; thisNote++) {
      int noteDuration = 1000/noteDurations[thisNote];
      tone(9, melody[thisNote],noteDuration);
      int pauseBetweenNotes = noteDuration * 1.30;
      delay(pauseBetweenNotes);
      noTone(9);
  }
}

void lockSong () {         //when the potentionmeter is turned to lock mode, play a song and change the LED
  
  int melody[] = {
      NOTE_C2, NOTE_D3, NOTE_E3, 0, NOTE_E3, NOTE_F3, NOTE_G3, 0, NOTE_G3, NOTE_F3, NOTE_E3, 0, NOTE_E3, NOTE_D4, NOTE_C4
  };
  
  int noteDurations[] = {
      4, 4, 2, 4, 4,4,2, 4, 4, 4, 2, 4, 4, 4, 2
  };
    
  int notes = 15;
  
  for (int thisNote = 0; thisNote < notes; thisNote++) {
      if(thisNote < 8){                                     //make LED transition from green to red with the song
      setColour(0, 255, 0);  
      } else {
      setColour(255, 255-(thisNote*36),0); 
      }                                       
      int noteDuration = 1000/noteDurations[thisNote];
      tone(9, melody[thisNote],noteDuration);
      int pauseBetweenNotes = noteDuration * 1.30;
      delay(pauseBetweenNotes);
      noTone(9); 
  }
  
  setColour(0, 0, 0);
  
  
}





